#!/usr/bin/env python
# coding: utf-8

import os

import pandas as pd
import xgboost as xgb
import numpy as np

from utils import swift

from patstat import dtypes_patstat_declaration as types
from patstat import csv_files_querying as cfq
from patstat import text_functions as tf

import unidecode

global liste_uni
global liste_latin

# directory where the files are
DATA_PATH = os.getenv('MOUNTED_VOLUME_TEST')

DICT = {"tls207": {'sep': ',', 'chunksize': 10000000, 'dtype': types.tls207_types},
        "tls206": {'sep': ',', 'chunksize': 3000000, 'dtype': types.tls206_types}
        }


def utf():
    codes_uni = [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                 58,
                 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
                 85,
                 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
                 109,
                 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160, 161, 162,
                 163,
                 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
                 184,
                 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
                 205,
                 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
                 226,
                 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
                 247,
                 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
                 268,
                 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                 289,
                 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
                 310,
                 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
                 331,
                 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
                 352,
                 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
                 373,
                 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
                 394,
                 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
                 415,
                 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
                 436,
                 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
                 457,
                 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
                 478,
                 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
                 499,
                 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
                 520,
                 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
                 541,
                 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
                 562,
                 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
                 583,
                 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
                 604,
                 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
                 625,
                 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
                 646,
                 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
                 667,
                 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
                 688,
                 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
                 709,
                 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
                 730,
                 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
                 751,
                 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
                 772,
                 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
                 793,
                 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
                 814,
                 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
                 835,
                 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
                 856,
                 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
                 877,
                 878, 879, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846,
                 7424,
                 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437, 7438, 7439, 7440, 7441,
                 7442,
                 7443, 7444, 7445, 7446, 7447, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457, 7458, 7459,
                 7460,
                 7461, 7468, 7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483,
                 7484,
                 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501,
                 7502,
                 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519,
                 7520,
                 7521, 7522, 7523, 7524, 7525, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543,
                 7544,
                 7545, 7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561,
                 7562,
                 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579,
                 7580,
                 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597,
                 7598,
                 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615,
                 7616,
                 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633,
                 7634,
                 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651,
                 7652,
                 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669,
                 7675,
                 7676, 7677, 7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692,
                 7693,
                 7694, 7695, 7696, 7697, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710,
                 7711,
                 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728,
                 7729,
                 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741, 7742, 7743, 7744, 7745, 7746,
                 7747,
                 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764,
                 7765,
                 7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 7775, 7776, 7777, 7778, 7779, 7780, 7781, 7782,
                 7783,
                 7784, 7785, 7786, 7787, 7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799, 7800,
                 7801,
                 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818,
                 7819,
                 7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7836,
                 7837,
                 7838, 7839, 7840, 7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853, 7854,
                 7855,
                 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864, 7865, 7866, 7867, 7868, 7869, 7870, 7871, 7872,
                 7873,
                 7874, 7875, 7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886, 7887, 7888, 7889, 7890,
                 7891,
                 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899, 7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908,
                 7909,
                 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926,
                 7927,
                 7928, 7929, 7930, 7931, 7932, 7933, 7934, 7935, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                 8201,
                 8202, 8203, 8204, 8205, 8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216, 8217, 8218,
                 8219,
                 8220, 8221, 8222, 8223, 8224, 8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236,
                 8237,
                 8238, 8239, 8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249, 8250, 8251, 8252, 8253, 8254,
                 8255,
                 8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271, 8272,
                 8273,
                 8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282, 8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290,
                 8291,
                 8292, 8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304, 8305, 8308, 8309, 8310, 8311,
                 8312,
                 8313, 8314, 8315, 8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329,
                 8330,
                 8331, 8332, 8333, 8334, 8336, 8337, 8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346, 8347, 8348,
                 8448,
                 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458, 8459, 8460, 8461, 8462, 8463, 8464, 8465,
                 8466,
                 8467, 8468, 8469, 8470, 8471, 8472, 8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480, 8481, 8482, 8483,
                 8484,
                 8485, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501,
                 8502,
                 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519,
                 8520,
                 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711, 8712, 8713,
                 8714,
                 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722, 8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731,
                 8732,
                 8733, 8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742, 8743, 8744, 8745, 8746, 8747, 8748, 8749,
                 8750,
                 8751, 8752, 8753, 8754, 8755, 8756, 8757, 8758, 8759, 8760, 8761, 8762, 8763, 8764, 8765, 8766, 8767,
                 8768,
                 8769, 8770, 8771, 8772, 8773, 8774, 8775, 8776, 8777, 8778, 8779, 8780, 8781, 8782, 8783, 8784, 8785,
                 8786,
                 8787, 8788, 8789, 8790, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799, 8800, 8801, 8802, 8803,
                 8804,
                 8805, 8806, 8807, 8808, 8809, 8810, 8811, 8812, 8813, 8814, 8815, 8816, 8817, 8818, 8819, 8820, 8821,
                 8822,
                 8823, 8824, 8825, 8826, 8827, 8828, 8829, 8830, 8831, 8832, 8833, 8834, 8835, 8836, 8837, 8838, 8839,
                 8840,
                 8841, 8842, 8843, 8844, 8845, 8846, 8847, 8848, 8849, 8850, 8851, 8852, 8853, 8854, 8855, 8856, 8857,
                 8858,
                 8859, 8860, 8861, 8862, 8863, 8864, 8865, 8866, 8867, 8868, 8869, 8870, 8871, 8872, 8873, 8874, 8875,
                 8876,
                 8877, 8878, 8879, 8880, 8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888, 8889, 8890, 8891, 8892, 8893,
                 8894,
                 8895, 8896, 8897, 8898, 8899, 8900, 8901, 8902, 8903, 8904, 8905, 8906, 8907, 8908, 8909, 8910, 8911,
                 8912,
                 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920, 8921, 8922, 8923, 8924, 8925, 8926, 8927, 8928, 8929,
                 8930,
                 8931, 8932, 8933, 8934, 8935, 8936, 8937, 8938, 8939, 8940, 8941, 8942, 8943, 8944, 8945, 8946, 8947,
                 8948,
                 8949, 8950, 8951, 8952, 8953, 8954, 8955, 8956, 8957, 8958, 8959, 10176, 10177, 10178, 10179, 10180,
                 10181,
                 10182, 10183, 10184, 10185, 10186, 10187, 10188, 10189, 10190, 10191, 10192, 10193, 10194, 10195,
                 10196,
                 10197, 10198, 10199, 10200, 10201, 10202, 10203, 10204, 10205, 10206, 10207, 10208, 10209, 10210,
                 10211,
                 10212, 10213, 10214, 10215, 10216, 10217, 10218, 10219, 10220, 10221, 10222, 10223, 10624, 10625,
                 10626,
                 10627, 10628, 10629, 10630, 10631, 10632, 10633, 10634, 10635, 10636, 10637, 10638, 10639, 10640,
                 10641,
                 10642, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10653, 10654, 10655,
                 10656,
                 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670,
                 10671,
                 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685,
                 10686,
                 10687, 10688, 10689, 10690, 10691, 10692, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 10700,
                 10701,
                 10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10711, 10712, 10713, 10714, 10715,
                 10716,
                 10717, 10718, 10719, 10720, 10721, 10722, 10723, 10724, 10725, 10726, 10727, 10728, 10729, 10730,
                 10731,
                 10732, 10733, 10734, 10735, 10736, 10737, 10738, 10739, 10740, 10741, 10742, 10743, 10744, 10745,
                 10746,
                 10747, 10748, 10749, 10750, 10751, 11776, 11777, 11778, 11779, 11780, 11781, 11782, 11783, 11784,
                 11785,
                 11786, 11787, 11788, 11789, 11790, 11791, 11792, 11793, 11794, 11795, 11796, 11797, 11798, 11799,
                 11800,
                 11801, 11802, 11803, 11804, 11805, 11806, 11807, 11808, 11809, 11810, 11811, 11812, 11813, 11814,
                 11815,
                 11816, 11817, 11818, 11819, 11820, 11821, 11822, 11823, 11824, 11825, 11826, 11827, 11828, 11829,
                 11830,
                 11831, 11832, 11833, 11834, 11835, 11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843, 11844,
                 11845,
                 11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 42752, 42753, 42754, 42755, 42756,
                 42757,
                 42758, 42759, 42760, 42761, 42762, 42763, 42764, 42765, 42766, 42767, 42768, 42769, 42770, 42771,
                 42772,
                 42773, 42774, 42775, 42776, 42777, 42778, 42779, 42780, 42781, 42782, 42783, 64256, 64257, 64258,
                 64259,
                 64260, 64261, 64262, 65056, 65057, 65058, 65059, 65060, 65061, 65062, 65063, 65064, 65065, 65066,
                 65067,
                 65068, 65069, 65104, 65105, 65106, 65108, 65109, 65110, 65111, 65112, 65113, 65114, 65115, 65116,
                 65117,
                 65118, 65119, 65120, 65121, 65122, 65123, 65124, 65125, 65126, 65128, 65129, 65130, 65131, 65281,
                 65282,
                 65283, 65284, 65285, 65286, 65287, 65288, 65289, 65290, 65291, 65292, 65293, 65294, 65295, 65296,
                 65297,
                 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, 65306, 65307, 65308, 65309, 65310, 65311,
                 65312,
                 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326,
                 65327,
                 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, 65339, 65340, 65341,
                 65342,
                 65343, 65344, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356,
                 65357,
                 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 65371,
                 65372,
                 65373, 65374, 65377, 65378, 65379, 65380, 65381, 65392, 65438, 65439, 65504, 65505, 65506, 65507,
                 65508,
                 65509, 65510, 119808, 119809, 119810, 119811, 119812, 119813, 119814, 119815, 119816, 119817, 119818,
                 119819, 119820, 119821, 119822, 119823, 119824, 119825, 119826, 119827, 119828, 119829, 119830, 119831,
                 119832, 119833, 119834, 119835, 119836, 119837, 119838, 119839, 119840, 119841, 119842, 119843, 119844,
                 119845, 119846, 119847, 119848, 119849, 119850, 119851, 119852, 119853, 119854, 119855, 119856, 119857,
                 119858, 119859, 119860, 119861, 119862, 119863, 119864, 119865, 119866, 119867, 119868, 119869, 119870,
                 119871, 119872, 119873, 119874, 119875, 119876, 119877, 119878, 119879, 119880, 119881, 119882, 119883,
                 119884, 119885, 119886, 119887, 119888, 119889, 119890, 119891, 119892, 119894, 119895, 119896, 119897,
                 119898, 119899, 119900, 119901, 119902, 119903, 119904, 119905, 119906, 119907, 119908, 119909, 119910,
                 119911, 119912, 119913, 119914, 119915, 119916, 119917, 119918, 119919, 119920, 119921, 119922, 119923,
                 119924, 119925, 119926, 119927, 119928, 119929, 119930, 119931, 119932, 119933, 119934, 119935, 119936,
                 119937, 119938, 119939, 119940, 119941, 119942, 119943, 119944, 119945, 119946, 119947, 119948, 119949,
                 119950, 119951, 119952, 119953, 119954, 119955, 119956, 119957, 119958, 119959, 119960, 119961, 119962,
                 119963, 119964, 119966, 119967, 119970, 119973, 119974, 119977, 119978, 119979, 119980, 119982, 119983,
                 119984, 119985, 119986, 119987, 119988, 119989, 119990, 119991, 119992, 119993, 119995, 119997, 119998,
                 119999, 120000, 120001, 120002, 120003, 120005, 120006, 120007, 120008, 120009, 120010, 120011, 120012,
                 120013, 120014, 120015, 120016, 120017, 120018, 120019, 120020, 120021, 120022, 120023, 120024, 120025,
                 120026, 120027, 120028, 120029, 120030, 120031, 120032, 120033, 120034, 120035, 120036, 120037, 120038,
                 120039, 120040, 120041, 120042, 120043, 120044, 120045, 120046, 120047, 120048, 120049, 120050, 120051,
                 120052, 120053, 120054, 120055, 120056, 120057, 120058, 120059, 120060, 120061, 120062, 120063, 120064,
                 120065, 120066, 120067, 120068, 120069, 120071, 120072, 120073, 120074, 120077, 120078, 120079, 120080,
                 120081, 120082, 120083, 120084, 120086, 120087, 120088, 120089, 120090, 120091, 120092, 120094, 120095,
                 120096, 120097, 120098, 120099, 120100, 120101, 120102, 120103, 120104, 120105, 120106, 120107, 120108,
                 120109, 120110, 120111, 120112, 120113, 120114, 120115, 120116, 120117, 120118, 120119, 120120, 120121,
                 120123, 120124, 120125, 120126, 120128, 120129, 120130, 120131, 120132, 120134, 120138, 120139, 120140,
                 120141, 120142, 120143, 120144, 120146, 120147, 120148, 120149, 120150, 120151, 120152, 120153, 120154,
                 120155, 120156, 120157, 120158, 120159, 120160, 120161, 120162, 120163, 120164, 120165, 120166, 120167,
                 120168, 120169, 120170, 120171, 120172, 120173, 120174, 120175, 120176, 120177, 120178, 120179, 120180,
                 120181, 120182, 120183, 120184, 120185, 120186, 120187, 120188, 120189, 120190, 120191, 120192, 120193,
                 120194, 120195, 120196, 120197, 120198, 120199, 120200, 120201, 120202, 120203, 120204, 120205, 120206,
                 120207, 120208, 120209, 120210, 120211, 120212, 120213, 120214, 120215, 120216, 120217, 120218, 120219,
                 120220, 120221, 120222, 120223, 120224, 120225, 120226, 120227, 120228, 120229, 120230, 120231, 120232,
                 120233, 120234, 120235, 120236, 120237, 120238, 120239, 120240, 120241, 120242, 120243, 120244, 120245,
                 120246, 120247, 120248, 120249, 120250, 120251, 120252, 120253, 120254, 120255, 120256, 120257, 120258,
                 120259, 120260, 120261, 120262, 120263, 120264, 120265, 120266, 120267, 120268, 120269, 120270, 120271,
                 120272, 120273, 120274, 120275, 120276, 120277, 120278, 120279, 120280, 120281, 120282, 120283, 120284,
                 120285, 120286, 120287, 120288, 120289, 120290, 120291, 120292, 120293, 120294, 120295, 120296, 120297,
                 120298, 120299, 120300, 120301, 120302, 120303, 120304, 120305, 120306, 120307, 120308, 120309, 120310,
                 120311, 120312, 120313, 120314, 120315, 120316, 120317, 120318, 120319, 120320, 120321, 120322, 120323,
                 120324, 120325, 120326, 120327, 120328, 120329, 120330, 120331, 120332, 120333, 120334, 120335, 120336,
                 120337, 120338, 120339, 120340, 120341, 120342, 120343, 120344, 120345, 120346, 120347, 120348, 120349,
                 120350, 120351, 120352, 120353, 120354, 120355, 120356, 120357, 120358, 120359, 120360, 120361, 120362,
                 120363, 120364, 120365, 120366, 120367, 120368, 120369, 120370, 120371, 120372, 120373, 120374, 120375,
                 120376, 120377, 120378, 120379, 120380, 120381, 120382, 120383, 120384, 120385, 120386, 120387, 120388,
                 120389, 120390, 120391, 120392, 120393, 120394, 120395, 120396, 120397, 120398, 120399, 120400, 120401,
                 120402, 120403, 120404, 120405, 120406, 120407, 120408, 120409, 120410, 120411, 120412, 120413, 120414,
                 120415, 120416, 120417, 120418, 120419, 120420, 120421, 120422, 120423, 120424, 120425, 120426, 120427,
                 120428, 120429, 120430, 120431, 120432, 120433, 120434, 120435, 120436, 120437, 120438, 120439, 120440,
                 120441, 120442, 120443, 120444, 120445, 120446, 120447, 120448, 120449, 120450, 120451, 120452, 120453,
                 120454, 120455, 120456, 120457, 120458, 120459, 120460, 120461, 120462, 120463, 120464, 120465, 120466,
                 120467, 120468, 120469, 120470, 120471, 120472, 120473, 120474, 120475, 120476, 120477, 120478, 120479,
                 120480, 120481, 120482, 120483, 120484, 120485, 120488, 120489, 120490, 120491, 120492, 120493, 120494,
                 120495, 120496, 120497, 120498, 120499, 120500, 120501, 120502, 120503, 120504, 120505, 120506, 120507,
                 120508, 120509, 120510, 120511, 120512, 120513, 120514, 120515, 120516, 120517, 120518, 120519, 120520,
                 120521, 120522, 120523, 120524, 120525, 120526, 120527, 120528, 120529, 120530, 120531, 120532, 120533,
                 120534, 120535, 120536, 120537, 120538, 120539, 120540, 120541, 120542, 120543, 120544, 120545, 120546,
                 120547, 120548, 120549, 120550, 120551, 120552, 120553, 120554, 120555, 120556, 120557, 120558, 120559,
                 120560, 120561, 120562, 120563, 120564, 120565, 120566, 120567, 120568, 120569, 120570, 120571, 120572,
                 120573, 120574, 120575, 120576, 120577, 120578, 120579, 120580, 120581, 120582, 120583, 120584, 120585,
                 120586, 120587, 120588, 120589, 120590, 120591, 120592, 120593, 120594, 120595, 120596, 120597, 120598,
                 120599, 120600, 120601, 120602, 120603, 120604, 120605, 120606, 120607, 120608, 120609, 120610, 120611,
                 120612, 120613, 120614, 120615, 120616, 120617, 120618, 120619, 120620, 120621, 120622, 120623, 120624,
                 120625, 120626, 120627, 120628, 120629, 120630, 120631, 120632, 120633, 120634, 120635, 120636, 120637,
                 120638, 120639, 120640, 120641, 120642, 120643, 120644, 120645, 120646, 120647, 120648, 120649, 120650,
                 120651, 120652, 120653, 120654, 120655, 120656, 120657, 120658, 120659, 120660, 120661, 120662, 120663,
                 120664, 120665, 120666, 120667, 120668, 120669, 120670, 120671, 120672, 120673, 120674, 120675, 120676,
                 120677, 120678, 120679, 120680, 120681, 120682, 120683, 120684, 120685, 120686, 120687, 120688, 120689,
                 120690, 120691, 120692, 120693, 120694, 120695, 120696, 120697, 120698, 120699, 120700, 120701, 120702,
                 120703, 120704, 120705, 120706, 120707, 120708, 120709, 120710, 120711, 120712, 120713, 120714, 120715,
                 120716, 120717, 120718, 120719, 120720, 120721, 120722, 120723, 120724, 120725, 120726, 120727, 120728,
                 120729, 120730, 120731, 120732, 120733, 120734, 120735, 120736, 120737, 120738, 120739, 120740, 120741,
                 120742, 120743, 120744, 120745, 120746, 120747, 120748, 120749, 120750, 120751, 120752, 120753, 120754,
                 120755, 120756, 120757, 120758, 120759, 120760, 120761, 120762, 120763, 120764, 120765, 120766, 120767,
                 120768, 120769, 120770, 120771, 120772, 120773, 120774, 120775, 120776, 120777, 120778, 120779, 120782,
                 120783, 120784, 120785, 120786, 120787, 120788, 120789, 120790, 120791, 120792, 120793, 120794, 120795,
                 120796, 120797, 120798, 120799, 120800, 120801, 120802, 120803, 120804, 120805, 120806, 120807, 120808,
                 120809, 120810, 120811, 120812, 120813, 120814, 120815, 120816, 120817, 120818, 120819, 120820, 120821,
                 120822, 120823, 120824, 120825, 120826, 120827, 120828, 120829, 120830, 120831]

    latin = {"lettre": []}
    for code in range(32, 127):
        l = ''.join(map(chr, range(code, code + 1)))
        latin["lettre"].append(l)

    for code in range(160, 880):
        l = ''.join(map(chr, range(code, code + 1)))
        latin["lettre"].append(l)

    df_latin = pd.DataFrame(data=latin)
    liste_latin = list(df_latin["lettre"].unique())

    uni = {"lettre": []}
    for code in codes_uni:
        l = ''.join(map(chr, range(code, code + 1)))
        uni["lettre"].append(l)

    df_uni = pd.DataFrame(data=uni)
    liste_uni = list(df_uni["lettre"].unique())

    return liste_uni, liste_latin


def use_olderinfo(prt: pd.DataFrame, fam_df: pd.DataFrame, auth: str) -> pd.DataFrame:
    df_fr = fam_df.loc[
        (fam_df["appln_auth"] == auth) & (fam_df["name_corrected"].notna())].reset_index(drop=True)

    df_fr2 = df_fr[["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id", "siren",
                    "siret",
                    "id_paysage", "rnsr", "grid", "sexe", "type",
                    "idref", "oc", "ror", "name_corrected",
                    "category_libelle",
                    "esri"]].drop_duplicates().sort_values(
        ["docdb_family_id", "applt_seq_nr", "invt_seq_nr"]).reset_index(
        drop=True)

    compte_fr = df_fr2[["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id", "name_corrected"]].groupby(
        ["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id"]).nunique(
        dropna=False).reset_index().rename(
        columns={"name_corrected": "compte"})
    compte_fru = compte_fr.loc[compte_fr["compte"] == 1]
    df_fru = pd.merge(df_fr2, compte_fru, on=["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id"],
                      how="inner").sort_values(
        ["docdb_family_id", "applt_seq_nr", "invt_seq_nr"]).drop_duplicates().reset_index(drop=True).drop(
        columns="compte")

    prt_fr = fam_df.loc[(fam_df["appln_auth"] != auth) & (fam_df["name_corrected"].isna())]

    prt_fr2 = prt_fr.drop(
        columns=["siren", "siret", "id_paysage", "rnsr", "grid", "sexe", "type", "idref", "oc", "ror",
                 "name_corrected", "category_libelle", "esri"]).drop_duplicates().sort_values(
        ["docdb_family_id", "applt_seq_nr", "invt_seq_nr"]).reset_index(drop=True)

    prt_fru = pd.merge(prt_fr2, df_fru, on=["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id"],
                       how="left").drop_duplicates().sort_values(
        ["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "doc_std_name_id", "person_id"]).reset_index(drop=True)
    prt_fruo = prt_fru.loc[prt_fru["name_corrected"].notna()]

    if len(prt_fru) > len(prt_fr):
        compte = prt_fru["key_appln_nr_person"].value_counts().reset_index()
        prt_fruo = prt_fruo.loc[
            prt_fruo["key_appln_nr_person"].isin(compte.loc[compte["key_appln_nr_person"] == 1, "index"])]

    prt_frm = prt_fr.loc[~prt_fr["key_appln_nr_person"].isin(prt_fruo["key_appln_nr_person"])]

    prt_for = fam_df.loc[
        (~fam_df["key_appln_nr_person"].isin(df_fr["key_appln_nr_person"])) & (
            ~fam_df["key_appln_nr_person"].isin(prt_fr["key_appln_nr_person"]))].drop_duplicates().reset_index(
        drop=True)

    prt_fr_fin = pd.concat([df_fr, prt_for, prt_fruo, prt_frm], ignore_index=True)

    prt2 = prt.loc[~prt["key_appln_nr_person"].isin(prt_fr_fin["key_appln_nr_person"])]
    prt2 = pd.concat([prt2, prt_fr_fin], ignore_index=True).drop_duplicates().reset_index(drop=True)

    return prt2


def clean_name(crt_prt: pd.DataFrame) -> pd.DataFrame:
    liste_uni, liste_latin = utf()

    crt_prt2 = crt_prt.copy()
    crt_prt2["id"] = crt_prt2["docdb_family_id"].astype(str) + crt_prt2["appln_auth"] + crt_prt2[
        "applt_seq_nr"].astype(
        str) + crt_prt2["invt_seq_nr"].astype(str)

    crt_prt2["name_clean2"] = crt_prt2["name_source"].copy()
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "SOCIETE ANONYME DES EAUX MINERALES D\x92EVIAN ET EN ABREGE \x93S.A.E.M.E\x94",
        "SOCIETE ANONYME DES EAUX MINERALES D'EVIAN ET EN ABREGE S.A.E.M.E", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"SOCIÉTÉ ANONYME DES EAUX MINÉRALES D\x92EVIAN ET EN ABRÉGÉ \x93S.A.E.M.E\x94",
        "SOCIETE ANONYME DES EAUX MINERALES D'EVIAN ET EN ABREGE S.A.E.M.E", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "L\'AIR LIQUIDE, SOCIETE ΑΝΟΝYΜΕ POUR L\'ETUDE ET L\'EXPLOITATION DES PROCEDES GEORGES CLAUDE",
        "L\'AIR LIQUIDE, SOCIETE ANONYME POUR L\'ETUDE ET L\'EXPLOITATION DES PROCEDES GEORGES CLAUDE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"LAB\x90GUERE, Fr\x82d\x82ric Gilbert",
        "LABÉGUÈRE, FRÉDÉRIC GILBERT", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"BR\x8eUNER, G\x81nter",
        "Bräuner, Günter", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"HEGED\x9aS, Krist¢f",
        "HEGEDÜS, Kristóf", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"MICHAUD, Jean\x81-Francois",
        "MICHAUD, Jean-François", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"FRAN\x80ON, Alain",
        "FRANÇON, Alain", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"FRAN�ON, ALAIN",
        "FRANÇON, Alain", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "AUDEMAR, MA�?TE",
        "AUDEMAR, MAÏTE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"PEYRONEL, JEAN-FRAN�OIS",
        "PEYRONEL, JEAN-FRANÇOIS", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"FRAN�OIS",
        "FRANÇOIS", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"C�DRIC",
        "CÉDRIC", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"S�BASTIEN",
        "SÉBASTIEN", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"V�RONIQUE",
        "VÉRONIQUE", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"JER�ME",
        "JÉRÔME", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"BENO�T",
        "BENOÎT", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"FR�D�RIC",
        "FRÉDÉRIC", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"ISTV�N LING",
        "ISTVÁN LING", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "HA�?DAR, Riad",
        "HAÏDAR, Riad", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "SIO-HO�?, Ieng",
        "SIO-HOÏ, Ieng", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"UNIVERSIT�",
        "UNIVERSITÉ", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"SJ�DIN",
        "SJÖDIN", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"WILKE, J�RGEN",
        "WILKE, JÜRGEN", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        r"SANT�",
        "SANTÉ", regex=True)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "WAGTMANN, Nicola�?",
        "WAGTMANN, Nicolaï", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "A�?T-ALI MAAMRI, Najate",
        "AÏT-ALI MAAMRI, Najate", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "LEBEUF Raphaёl",
        "LEBEUF Raphaël", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "CSABA W¿BER",
        "CSABA WÉBER", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Deboeuf, S¿bastien",
        "Deboeuf, Sébastien", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "RTE Réseau de transport d¿électricité",
        "RTE Réseau de transport d'électricité", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "UNIVERSITÉ D¿AIX-MARSEILLE",
        "UNIVERSITÉ D'AIX-MARSEILLE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "MATA DUMENJÃ¿, MONTSERRAT",
        "MATA DUMENJÓ, MONTSERRAT", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "ASSISTANCE PUBLIQUE-HÃ¿PITAUX DE PARIS",
        "ASSISTANCE PUBLIQUE-HÔPITAUX DE PARIS", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "DA SILVA ARÃ¿DE, LUIS",
        "DA SILVA ARÊDE, LUIS", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "NAA«L OUEDRAOGO",
        "NAËL OUEDRAOGO", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "[NSERM",
        "INSERM", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "L & RSQUO EN",
        "L'ENERGIE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "L+ENERGIE",
        "L'ENERGIE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "WALTER+ELIZA",
        "WALTER AND ELIZA", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "L/OREAL",
        "L'OREAL", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "1/1",
        "", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "(1/4)",
        "", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "UNIVERSITA` DEGLI STUDI DI PAVIA",
        "UNIVERSITÀ DEGLI STUDI DI PAVIA", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "UNIVERSITÄ{umlaut over (C)}Ü{umlaut over ( )}Ë DE MONTPELLIER",
        "UNIVERSITÉ DE MONTPELLIER", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "{hacek over (S)}ed{hacek over (e)}nka, Jaroslav",
        "SEDENKA, Jaroslav", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "FREC|N|SYS",
        "Frec\'N\'Sys", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "BENOIT.LANGLA|",
        "BENOIT LINGLIN", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "|’alimentation",
        "l’alimentation", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "FERN ¨ ¢ NDEZ GARC ¨ AA, YANICK",
        "FERNANDEZ GARCIA JANIK", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "DJÃ©LÃ¢L",
        "DJELAL", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Mikl¢s",
        "Miklós", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "FERN ¨ ¢ NDEZ, JOS ¨",
        "FERNANDEZ JAVIER", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "BILLUEZ, ISTV ¨ ¢ N",
        "BIRLOUEZ, Inès", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "S ¨ ¢ NCHEZ GOMEZ, MIREA",
        "SANCHEZ GOMEZ, Mireya", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "UNIVERSIT ¨ ¤ DEGLI STUDI DI SINGH MARK",
        "SIGMA Clermont", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "BÄLTER, HÃ¥kan",
        "BÄLTER, HÅKAN", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "SNORRE K HERNA¦SS",
        "Hernæss, Snorre K", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Soci§té",
        "Société", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "ChÃªne",
        "Chêne", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Benoí®t",
        "Benoît", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "(INSERM°",
        "(INSERM)", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "(PARIS 6°",
        "(PARIS 6)", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "FRANA§OIS",
        "FRANÇOIS", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Franí§ois",
        "François", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "[.\'EXPLOITATION",
        "L\'EXPLOITATION", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "SJ\\DIN",
        "SJÖDIN", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "STE]PHANE",
        "STÉPHANE", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "\'S.A.E.M_E\'",
        "S.A.E.M.E", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "TECHNIGAZ_",
        "TECHNIGAZ", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "(GRENOBLE₂SAS",
        "(GRENOBLE 2) SAS", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "MYD″L″",
        "MYD'L", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "MYD“L”",
        "MYD'L", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "i′",
        "ì", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "e′",
        "é", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "a′",
        "à", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "A′",
        "À", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Liebherr•Mining Equipment Colmar SAS",
        "Liebherr-Mining Equipment Colmar SAS", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "COMMISSARIAT Â L\'ÉNERGIE ATOMIQUE ET AUX ÉNERGIES ALTERNATIVES (“CEA”)",
        "COMMISSARIAT À L\'ÉNERGIE ATOMIQUE ET AUX ÉNERGIES ALTERNATIVES", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "SOCIETE ANONYME DES EAUX MINERALES D\'EVIAN et en abrégé“S.A.E.M.E.”",
        "SOCIETE ANONYME DES EAUX MINERALES D\'EVIAN et en abrégé S.A.E.M.E.", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "O̸",
        "O̸", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "C̨",
        "Ç", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "LABORATOIRE FRANÇ-̧AIS DU FRACTIONNEMENT ET DES BIOTECHNOLOGIES",
        "LABORATOIRE FRANÇAIS DU FRACTIONNEMENT ET DES BIOTECHNOLOGIES", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "Oglaza, Jean-Franḉois",
        "Oglaza, Jean-François", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "NÃ¼TZEL GERT",
        "NÜTZEL GERT", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "A¸",
        "O̸", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "AUDIGIE, JEAN·CHARLES",
        "AUDIGIE, JEAN-CHARLES", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(
        "é´",
        "é", regex=False)

    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x92", "'", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x96", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x94", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x82", "é", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x8a", "è", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x8b", "ï", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x9a", "Ü", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x81", "ü", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x89", "ë", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("β", "ß", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x8c", "ï", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x87", "ç", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x93", "ô", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"Ã\x80", "À", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x95", "ò", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x90", "É", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\x99", "Ö", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\xa0", "á", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\u200b", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("公司", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ãº", "Ú", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã¨", "É", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã¼", "Ü", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã«", "Ë", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("A«", "Ë", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã©", "É", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("A©", "É", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã´", "Ô", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã®", "î", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã¿", "Ó", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("L¿", "L'", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("¿", "-", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("ï¿½", "É", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(" ¨ 1 ", "Ü", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("#34", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(" (25%)", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("\\n", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("=", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("´", "'", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("′", "'", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("́", "'", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("`", "'", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"•\s?", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\.?\*{1,}", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"^:\s{0,}", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\s{0,}:\s{0,}$", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"^;\s{0,}", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\s{0,};\s{0,}$", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"^03;", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\s{0,}\[$", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\[FR\]|\(FR\)", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("_", "-", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("‐", "-", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("–", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("—", " ", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("‘", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("’", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("“", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("”", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{grave over ( )}", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{dot over (o)}", "ó", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{hacek over (o)}", "ô", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{hacek over (s)}", "s", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{hacek over (a)}", "ă", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{dot over (O)}", "Ô", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{dot over (A)}", "À", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{hacek over (e)}", "ë", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("{hacek over (i)}", "î", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("ti{acute over (f)}", "íf", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("ë{umlaut over ( )}", "é", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("M{circumflex over (D)}DICALE", "MÉDICALE",
                                                                  regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("|", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(" ¨ ¢ ", "A", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("¤", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã§", "Ç", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"§$", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\xad", "", regex=True)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Ã³", "Ó", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace("Å", "À", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(" −", "", regex=False)
    crt_prt2["name_clean2"] = crt_prt2["name_clean2"].str.replace(r"\s?\}$", "", regex=True)
    crt_prt2.loc[crt_prt2["name_clean2"] != "B<>COM", "name_clean2"] = crt_prt2.loc[
        crt_prt2["name_clean2"] != "B<>COM", "name_clean2"].str.replace(r"<+", "",
                                                                        regex=True)
    crt_prt2.loc[crt_prt2["name_clean2"] != "B<>COM", "name_clean2"] = crt_prt2.loc[
        crt_prt2["name_clean2"] != "B<>COM", "name_clean2"].str.replace(r">+", "",
                                                                        regex=True)

    crt_prt2["set_name"] = crt_prt2["name_clean2"].apply(lambda x: set([l for l in x]))
    crt_prt2["diff"] = crt_prt2["set_name"].apply(lambda x: x.difference(set(liste_uni)))
    crt_prt2.loc[crt_prt2["diff"] == {'С'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'С'}, "name_clean2"].str.replace("С", "C", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'Σ'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'Σ'}, "name_clean2"].str.replace("Σ", "Ç", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'ё'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'ё'}, "name_clean2"].str.replace("ё", "ё", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'ς'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'ς'}, "name_clean2"].str.replace("ς", "ç", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'Ι', 'Χ'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'Ι', 'Χ'}, "name_clean2"].str.replace("Ι", "I", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'Ι', 'Χ'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'Ι', 'Χ'}, "name_clean2"].str.replace("Χ", "X", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'ِ'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'ِ'}, "name_clean2"].str.replace("ِ", "", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {'Ί'}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {'Ί'}, "name_clean2"].str.replace("Ί", "Í", regex=False)
    crt_prt2.loc[crt_prt2["diff"] == {"ُ"}, "name_clean2"] = crt_prt2.loc[
        crt_prt2["diff"] == {"ُ"}, "name_clean2"].str.replace("ُ", "", regex=False)

    crt_prt2["set_name"] = crt_prt2["name_clean2"].apply(lambda x: set([l for l in x]))
    crt_prt2["diff"] = crt_prt2["set_name"].apply(lambda x: x.difference(set(liste_uni)))

    compte_key = crt_prt2[["docdb_family_id", "key_appln_nr"]].groupby("docdb_family_id").nunique(
        dropna=False).reset_index()
    compte_key = compte_key.loc[compte_key["key_appln_nr"] > 1].rename(columns={"key_appln_nr": "compte"}).reset_index(
        drop=True)

    crt_prt2_multi = crt_prt2.loc[crt_prt2["docdb_family_id"].isin(compte_key["docdb_family_id"])]

    auth_fam = {}
    for r in crt_prt2_multi.itertuples():
        fam = r.docdb_family_id
        auth = r.key_appln_nr
        dep = r.applt_seq_nr
        inv = r.invt_seq_nr

        if fam not in auth_fam:
            auth_fam[fam] = {}

        if auth not in auth_fam[fam]:
            auth_fam[fam][auth] = {"max_app": dep, "max_invt": inv}

        if auth in auth_fam[fam]:
            if dep >= auth_fam[fam][auth]["max_app"]:
                auth_fam[fam][auth]["max_app"] = dep
            if inv >= auth_fam[fam][auth]["max_invt"]:
                auth_fam[fam][auth]["max_invt"] = inv

    family = []

    for fam in auth_fam:
        maxapp = set()
        maxinv = set()
        for key in auth_fam[fam]:
            maxapp.add(auth_fam[fam][key]["max_app"])
            maxinv.add(auth_fam[fam][key]["max_invt"])

        if len(maxapp) == 1 and len(maxinv) == 1:
            family.append(fam)

    fam_app_inv = crt_prt2.loc[crt_prt2["docdb_family_id"].isin(family)].sort_values(
        by=["docdb_family_id", "applt_seq_nr", "invt_seq_nr"]).reset_index(drop=True)

    fam_app_inv_nnc = fam_app_inv.loc[fam_app_inv["name_corrected"].isna()].reset_index(drop=True)

    fam_app_inv_nnc["com"] = fam_app_inv_nnc["set_name"].apply(
        lambda x: len([l for l in list(x.intersection(set(liste_latin))) if l and l.isalpha()]))

    fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "liste_mots"] = \
        fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "name_clean2"].str.replace(
            "-", " ", regex=False).apply(
            lambda x: x.split(" "))
    fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "liste_mots"] = \
        fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "liste_mots"].apply(
            lambda x: ["".join([a for a in m if a.isalnum()]) for m in x if m])
    fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "lettres"] = \
        fam_app_inv_nnc.loc[fam_app_inv_nnc["com"] > 0, "liste_mots"].apply(
            lambda a: [c[0] for c in
                       ["".join([unidecode.unidecode(l.lower()) for l in m if l and l.isalnum() and l in liste_latin])
                        for m in a if m] if c != ""])

    fam_app_inv_nnc = fam_app_inv_nnc.drop(columns=["name_corrected", "siren", "siret",
                                                    "id_paysage", "rnsr", "grid", "sexe", "type",
                                                    "oc", "ror", "category_libelle",
                                                    "esri"])

    crt_prt3 = fam_app_inv.loc[fam_app_inv["name_corrected"].notna(), ["docdb_family_id",
                                                                       "applt_seq_nr",
                                                                       "invt_seq_nr",
                                                                       "name_corrected", "siren", "siret",
                                                                       "id_paysage", "rnsr", "grid", "sexe", "type",
                                                                       "oc", "ror", "category_libelle",
                                                                       "esri"]].drop_duplicates().sort_values(
        ["docdb_family_id",
         "applt_seq_nr",
         "invt_seq_nr",
         "name_corrected"]).reset_index(drop=True)

    compte = crt_prt3.groupby(["docdb_family_id", "applt_seq_nr", "invt_seq_nr"]).nunique(
        dropna=False).reset_index()

    unique = compte.loc[(compte["name_corrected"] == 1) & (compte["siren"] == 1) & (compte["siret"] == 1) &
                        (compte["id_paysage"] == 1) & (compte["rnsr"] == 1) & (compte["grid"] == 1) & (
                                compte["sexe"] == 1) & (compte["type"] == 1) & (compte["oc"] == 1) & (
                                compte["ror"] == 1) & (compte["category_libelle"] == 1) & (compte["esri"] == 1)]

    unique = unique[["docdb_family_id", "applt_seq_nr", "invt_seq_nr", "name_corrected"]].rename(
        columns={"name_corrected": "compte"})

    crt_prt4 = pd.merge(crt_prt3, unique, on=["docdb_family_id", "applt_seq_nr", "invt_seq_nr"], how="inner")
    crt_prt4 = crt_prt4.drop(columns=["compte"]).drop_duplicates().reset_index(drop=True)

    crt_prt4["liste_mots"] = crt_prt4["name_corrected"].str.replace("-", " ", regex=False).apply(
        lambda x: x.split(" "))
    crt_prt4["liste_mots"] = crt_prt4["liste_mots"].apply(
        lambda x: ["".join([a for a in m if a.isalnum()]) for m in x if m])
    crt_prt4["lettres"] = crt_prt4["liste_mots"].apply(
        lambda a: [unidecode.unidecode(m[0].lower()) for m in a if m and m.isalnum()])

    nonlatin = pd.merge(fam_app_inv_nnc, crt_prt4, on=["docdb_family_id", "applt_seq_nr", "invt_seq_nr"],
                        how="inner")

    nonlatin.loc[nonlatin["com"] > 0, "set_commun"] = nonlatin.loc[nonlatin["com"] > 0].apply(
        lambda a: list(set(a["lettres_x"]).intersection(set(a["lettres_y"]))), axis=1)

    nonlatin.loc[nonlatin["com"] > 0, "len_commun"] = nonlatin.loc[nonlatin["com"] > 0, "set_commun"].apply(
        lambda a: len(a))

    nonlatin.loc[nonlatin["com"] > 0, "commun"] = nonlatin.loc[nonlatin["com"] > 0, "len_commun"].apply(
        lambda a: "commun" if a >= 1 else "non")

    nonlatin.loc[(nonlatin["com"] > 0) & (nonlatin["appln_auth"].isin(["CN", "HK", "JP", "KR"])), "commun"] = \
        nonlatin.loc[(nonlatin["com"] > 0) & (nonlatin["appln_auth"].isin(["CN", "HK", "JP", "KR"]))].apply(
            lambda a: "commun" if "oui" in "".join(["oui" for x in a["liste_mots_x"] if "PSA" in x]) and "STELLANTIS" in
                                  a[
                                      "name_corrected"] else a["commun"], axis=1)

    nonlatin.loc[(nonlatin["com"] > 0) & (nonlatin["appln_auth"].isin(["CN", "HK", "JP", "KR"])), "commun"] = \
        nonlatin.loc[(nonlatin["com"] > 0) & (nonlatin["appln_auth"].isin(["CN", "HK", "JP", "KR"]))].apply(
            lambda a: "commun" if "oui" in "".join(
                ["oui" for x in a["liste_mots_x"] if "AISHIROKU" in x]) and "Isorg" in
                                  a[
                                      "name_corrected"] else a["commun"], axis=1)

    nonlatin.loc[(nonlatin["com"] > 0) & (nonlatin["appln_auth"].isin(["CN", "HK", "JP", "KR"])) & (
        nonlatin["name_clean2"].isin(
            ["ZODIAC航空电器", "ZODIAC AEROSPACE", "7HUGS LABS SAS", "AIDIFU", "AOLAIDE COMMUNICATIONS CO., LTD.",
             "BOITIS, INC."])), "commun"] = "commun"

    nonlatin2 = nonlatin.loc[nonlatin["commun"] == "commun"].drop(
        columns=["set_commun", "len_commun", "commun", "lettres_y", "liste_mots_y", "lettres_x", "liste_mots_x", "com",
                 "set_name", "id"]).rename(
        columns={"name_corrected_y": "name_corrected"}).reset_index(drop=True)

    nonlatin2["islatin"] = True

    crt_prt5 = crt_prt2.drop(columns=['id', 'set_name'])

    # nonlatin2 = nonlatin2[list(crt_prt5.columns)]

    crt_prt6 = crt_prt5.loc[~crt_prt5["key_appln_nr_person"].isin(nonlatin2["key_appln_nr_person"])]
    crt_prt6 = pd.concat([crt_prt6, nonlatin2], ignore_index=True)

    crt_prt6.loc[crt_prt6["diff"] == set(), "islatin"] = True
    crt_prt6.loc[(crt_prt6["diff"] != set()) & (crt_prt6["name_corrected"].isna()), "islatin"] = False
    crt_prt6.loc[(crt_prt6["diff"] != set()) & (crt_prt6["name_corrected"].notna()), "islatin"] = True

    crt_prt6 = crt_prt6.drop(columns="diff")

    return crt_prt6


def initialization_participants(pat: pd.DataFrame, t207: pd.DataFrame, t206: pd.DataFrame,
                                prt_history: pd.DataFrame) -> pd.DataFrame:
    """ This function initializes a table of participants from past corrected information
    and new patstat version informations

    :param pat: df with application informations - T201 or part of - comes from programme "p03_patents"
    :param t207: df with table 207 PATSTAT or extract of
    :param t206: df with table 206 PATSTAT or extract of
    :param part_history: participants history - output "part_init" of p05 from previous PATSTAT edition
    :return: df with "clean" information on participants
    """

    tbl207 = pat.merge(t207, how="inner", on="appln_id")
    print("5 : tbl207 : jointure patents et tls207", flush=True)

    new_participants = pd.merge(tbl207, t206, how="inner", on="person_id")
    # we create a unique participant ID "key_appln_nr_person"
    # before "id_participant" but "appln_nr_epodoc" is deprecated and will be removed at some point
    # can keep "appln_nr_epodoc" and "id_participant" for now
    # new_participants["id_participant"] = new_participants["appln_nr_epodoc"].astype(str) + "_" + new_participants[
    #     "person_id"].astype(str)

    new_participants["key_appln_nr_person"] = new_participants["key_appln_nr"] + "_" + new_participants[
        "person_id"].astype(str) + "_" + new_participants["applt_seq_nr"].astype(str) + "_" + new_participants[
                                                  "invt_seq_nr"].astype(str)

    # merge previous file with latest PATSTAT data on "id_participant", "key_appln_nr_person", "appln_id", "appln_nr",
    # "appln_kind", "receiving_office" and "key_appln_nr"
    prt = pd.merge(new_participants[
                       ["person_id", "docdb_family_id", "inpadoc_family_id",
                        "applt_seq_nr", "doc_std_name", "doc_std_name_id",
                        "earliest_filing_date", "invt_seq_nr", "person_name", "person_address", "person_ctry_code",
                        "psn_sector", "psn_id",
                        "psn_name", "appln_publn_number", "appln_auth", "appln_id", "appln_nr", "appln_kind",
                        "receiving_office", "key_appln_nr_person", "key_appln_nr"]],
                   prt_history[["old_name", "country_corrected", "siren", "siret",
                                "id_paysage", "rnsr", "grid", "sexe", "id_personne", "type", "idref", "oc", "ror",
                                "appln_id", "appln_nr",
                                "appln_kind",
                                "receiving_office", "key_appln_nr", "key_appln_nr_person", "name_corrected",
                                "category_libelle", "esri"]],
                   on=["key_appln_nr_person", "appln_id", "appln_nr", "appln_kind",
                       "receiving_office", "key_appln_nr"], how="left") \
        .rename(
        columns={"person_name": "name_source", "person_address": "address_source",
                 "person_ctry_code": "country_source", "appln_publn_number": "publication_number"})

    print("7 : jointure part_init new parts", flush=True)

    # remove records where name is missing
    prt = prt.dropna(subset=["name_source"])

    auth_fam = {}
    for r in prt.itertuples():
        fam = r.docdb_family_id
        auth = r.appln_auth
        if fam not in auth_fam:
            auth_fam[fam] = []

        if auth not in auth_fam[fam]:
            auth_fam[fam].append(auth)

    fr = []
    ep = []
    for fam in auth_fam:
        if len(auth_fam[fam]) > 1:
            if "FR" in auth_fam[fam]:
                fr.append(fam)
            elif "EP" in auth_fam[fam]:
                ep.append(fam)

    fam_fr = prt.loc[prt["docdb_family_id"].isin(fr)]

    fam_ep = prt.loc[prt["docdb_family_id"].isin(ep)]

    prt_fr = use_olderinfo(prt, fam_fr, "FR")

    prt_ep = use_olderinfo(prt_fr, fam_ep, "EP")

    return prt_ep


def add_info(prt: pd.DataFrame, var: str) -> pd.DataFrame:
    prt_var = prt.loc[prt[var].notna()]
    prt_varna = prt.loc[prt[var].isna()]
    prt_varna = prt_varna.drop(columns=var)

    prt_compte = prt_var[["doc_std_name", "doc_std_name_id", "name_source", var]].drop_duplicates() \
        .groupby(["doc_std_name", "doc_std_name_id", "name_source"]).nunique(dropna=False).reset_index().rename(
        columns={var: "count"})

    prt_compte = prt_compte[prt_compte["count"] == 1]
    prt_compte = pd.merge(prt_var[["doc_std_name", "doc_std_name_id", "name_source", var]], prt_compte,
                          on=["doc_std_name", "doc_std_name_id", "name_source"],
                          how="inner").drop_duplicates().drop(columns="count")

    prt_compte["id"] = prt_compte["doc_std_name"] + prt_compte["doc_std_name_id"].astype(str) + prt_compte[
        "name_source"]

    prt_compte = prt_compte.loc[prt_compte[var].notna()]

    prt_varna = pd.merge(prt_varna, prt_compte, on=["doc_std_name", "doc_std_name_id", "name_source", "id"],
                         how="left")
    prt_varnna = prt_varna.loc[prt_varna[var].notna()]
    prt_varna2 = prt_varna.loc[
        prt_varna[var].isna()].drop_duplicates().reset_index(drop=True)

    prt = pd.concat([prt_var, prt_varnna, prt_varna2], ignore_index=True)

    return prt


def xgb_learning(prt_record: pd.DataFrame) -> pd.DataFrame:
    """
    Predict label pp/pm with fasttext model

    :param prt_record: df create_part
    :return: df with pm/pp for each records
    """

    prt_xgb = prt_record.loc[prt_record["type"].isna()].drop(columns="type")
    prt_type = prt_record.loc[prt_record["type"].notna()]
    prt_compte = prt_type[["doc_std_name", "doc_std_name_id", "name_source", "type"]].drop_duplicates() \
        .groupby(["doc_std_name", "doc_std_name_id", "name_source"]).nunique(dropna=False).reset_index().rename(
        columns={"type": "count_type"})

    prt_compte = prt_compte[prt_compte["count_type"] == 1]
    prt_compte = pd.merge(prt_type[["doc_std_name", "doc_std_name_id", "name_source", "type"]], prt_compte,
                          on=["doc_std_name", "doc_std_name_id", "name_source"],
                          how="inner").drop_duplicates().drop(columns="count_type")

    prt_compte["id"] = prt_compte["doc_std_name"] + prt_compte["doc_std_name_id"].astype(str) + prt_compte[
        "name_source"]

    prt_compte = prt_compte.loc[prt_compte["type"].notna()]

    prt_xgb["id"] = prt_xgb["doc_std_name"] + prt_xgb["doc_std_name_id"].astype(str) + prt_xgb["name_source"]

    prt_xgb2 = prt_compte.loc[prt_compte["id"].isin(prt_xgb["id"])]
    prt_xgb = pd.merge(prt_xgb, prt_xgb2, on=["doc_std_name", "doc_std_name_id", "name_source", "id"], how="left")
    prt_xgb_nna = prt_xgb.loc[prt_xgb["type"].notna()]
    prt_xgb_na = prt_xgb.loc[
        prt_xgb["type"].isna(), ["name_source", "doc_std_name", "invt_seq_nr"]].drop_duplicates().reset_index(
        drop=True)
    prt_xgb_na2 = prt_xgb.loc[
        prt_xgb["type"].isna()].drop_duplicates().reset_index(drop=True).drop(columns="type")

    mod = xgb.Booster()
    mod.load_model("0001.model")

    for col in list(prt_xgb_na.columns):
        prt_xgb_na[col] = prt_xgb_na[col].astype("category")

    dtrain = xgb.DMatrix(prt_xgb_na, enable_categorical=True)

    ypred = mod.predict(dtrain)

    prt_xgb_na = prt_xgb_na.reset_index(drop=True).copy()

    prt_xgb_na.insert(3, "pred_xgb", pd.Series(ypred))

    prt_xgb_na["type"] = prt_xgb_na["pred_xgb"].apply(lambda a: "pp" if a >= 0.5 else "pm")
    print("15 : prédictions type", flush=True)

    prt_xgb_na = prt_xgb_na.drop(columns="pred_xgb")
    prt_xgb_na2 = pd.merge(prt_xgb_na2, prt_xgb_na, on=["name_source", "doc_std_name", "invt_seq_nr"], how="left")

    prt_concat = pd.concat([prt_type, prt_xgb_nna, prt_xgb_na2], ignore_index=True)

    return prt_concat


def get_ncor(prt: pd.DataFrame) -> pd.DataFrame:
    deposant = prt.loc[prt["name_corrected"].isna()]
    deposant = deposant.drop(columns="name_corrected")

    liste_deposant = list(prt.loc[prt["name_corrected"].isna(), "docdb_family_id"])

    deposant2 = prt.loc[(prt["docdb_family_id"].isin(liste_deposant)) & (prt["applt_seq_nr"] > 0)]

    depaffilition_dict = {}
    for row in deposant2.itertuples():
        family_id = row.docdb_family_id
        seq = row.applt_seq_nr
        source = row.name_source
        corrected = row.name_corrected

        if family_id not in depaffilition_dict:
            depaffilition_dict[family_id] = {}
        if seq not in depaffilition_dict[family_id]:
            depaffilition_dict[family_id][seq] = {"source": [], "corrected": []}

        if corrected is not np.nan:
            if corrected not in depaffilition_dict[family_id][seq]["corrected"]:
                depaffilition_dict[family_id][seq]["corrected"].append(corrected)
            if source not in depaffilition_dict[family_id][seq]["source"]:
                depaffilition_dict[family_id][seq]["source"].append(source)

    lname = {"docdb_family_id": [], "applt_seq_nr": [], "name_corrected": [], "name_source": []}
    for family_id in depaffilition_dict:
        for seq in depaffilition_dict[family_id]:
            lcor = len(depaffilition_dict[family_id][seq]["corrected"])
            if lcor == 1:
                cor = depaffilition_dict[family_id][seq]["corrected"][0]
                for nom in depaffilition_dict[family_id][seq]["source"]:
                    lname["docdb_family_id"].append(family_id)
                    lname["applt_seq_nr"].append(seq)
                    lname["name_corrected"].append(cor)
                    lname["name_source"].append(nom)

    df_dep = pd.DataFrame(data=lname)

    deposant3 = pd.merge(deposant, df_dep, on=["docdb_family_id", "applt_seq_nr", "name_source"], how="left")

    prt2 = prt.loc[~prt["key_appln_nr_person"].isin(deposant3["key_appln_nr_person"])]
    prt2 = pd.concat([prt2, deposant3], ignore_index=True)

    return prt2


def isascii(prt_ds: pd.DataFrame) -> pd.DataFrame:
    """
    Create 'isascii' to indicate if a name is written in the latin alphabet and with special characters,
    name_clean with name_source cleaned
    and replace missing values in country_correcetd by values in country_source
    :param part_ds: df with participant type
    :return: df
    """
    prt_ds.loc[:, "isascii"] = prt_ds["name_source"].apply(tf.remove_punctuations).apply(tf.remove_accents).apply(
        tf.isascii)
    print("19 : fin remove punctuations et remove accents", flush=True)
    prt_ds.loc[:, "name_clean"] = prt_ds["name_source"].apply(tf.get_clean_name)
    prt_ds.loc[prt_ds["name_corrected"].notna(), "name_clean"] = prt_ds.loc[
        prt_ds["name_corrected"].notna(), "name_corrected"]
    print("20 : fin name source", flush=True)

    # part_ds2 = part_ds.copy()
    print("21 : fin copy part_ds2", flush=True)
    prt_ds.loc[prt_ds["country_corrected"] == "", "country_corrected"] = prt_ds.loc[
        prt_ds["country_corrected"] == "", "country_source"]
    # part_ds2["country_corrected"] = np.where(part_ds2["country_corrected"] == "", part_ds2["country_source"],
    #                                          part_ds2["country_corrected"])

    print("22 : fin remplacement pays manquant par \"\"", flush=True)

    return prt_ds


def start_part():
    # set working directory
    os.chdir(DATA_PATH)

    patents = pd.read_csv("patent.csv", sep="|", dtype=types.patent_types)
    print("1 : chargement patents", flush=True)
    swift.download_object('patstat', 'part_init_p05.csv', 'part_init_p05.csv')
    old_part = pd.read_csv("part_init_p05.csv",
                           sep='|',
                           dtype=types.part_init_types,
                           encoding="utf-8",
                           engine="python")
    old_part = old_part.drop_duplicates()
    # old_part.to_csv("part_init_backup.csv", sep="|", index=False)
    print("2 : chargement part_init", flush=True)

    old_part["key_appln_nr_person"] = old_part["key_appln_nr"] + "_" + old_part[
        "person_id"].astype(str) + "_" + old_part["applt_seq_nr"].astype(str) + "_" + old_part[
                                          "invt_seq_nr"].astype(str)

    tls207 = cfq.filtering("tls207", patents, "appln_id", DICT["tls207"])

    tls206 = cfq.filtering("tls206", tls207, "person_id", DICT["tls206"])

    create_part = initialization_participants(patents, tls207, tls206, old_part)

    create_part2 = clean_name(create_part)

    part_init = xgb_learning(create_part2)

    variables = ["name_corrected", "category_libelle", "siren", "siret", "id_paysage", "sexe"]

    part_var = part_init.copy()

    for variable in variables:
        part_var = add_info(part_var, variable)

    part_var2 = get_ncor(part_var)

    if "id" in list(part_var2.columns):
        part_var2 = part_var2.drop(columns="id")

    part_init2 = isascii(part_var2)
    print("23 : fin isascii", flush=True)

    part_init2.to_csv("part_init_p05.csv", sep="|", index=False)
    swift.upload_object('patstat', 'part_init_p05.csv')

    part_init3 = part_init2.drop(columns={"applt_seq_nr", "invt_seq_nr"}).drop_duplicates()
    part_init3.to_csv("part_p05.csv", sep="|", index=False)
    swift.upload_object('patstat', 'part_p05.csv')
